#!/usr/bin/env python3
"""
This code generates an output file 'name_phononTB_hr.dat' which is an input of wannier90/wanniertools/simphony.
Inputs are output files from Quantum Espresso. Mainly the 'name.dat{0,1,2,...}' files, which are read and parsed using SSCHA's CellConstructor.

TB_hr.dat file format can be seen here: https://wannier90.readthedocs.io/en/latest/user_guide/wannier90/files/#seedname_centresxyz

Usage:
QE2TBDAT PathTo/name.dyn N_irr_q [ASR], []=optional

ASR options: 
- 'no' (default)
- 'simple'
- 'crystal'


"""

# IMPORTS
from datetime import datetime
import numpy as np
import cellconstructor as CC
import cellconstructor.Phonons
import cellconstructor.ForceTensor
from cellconstructor.Units import MASS_RY_TO_UMA
import sys
import symph

def printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 10, fill = 'â–ˆ', printEnd = "\r"):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
        printEnd    - Optional  : end character (e.g. "\r", "\r\n") (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print(f'\r{prefix} |{bar}| {percent}% {suffix}', end = printEnd)
    # Print New Line on Complete
    if iteration == total: 
        print()

def smallest_vectors(spos, pos, sbasis, symprec=1e-12):

    snatoms = len(spos)
    natoms = len(pos)
    
    smallestvectors = np.zeros((snatoms, snatoms, 27, 3))
    multi = np.zeros((snatoms,snatoms))
    
    '''
    This next part is forked from phonopy, i do not really understand it but it works

    ' Si non confectus, no reficiat ' 

    '''
    
    #THIS PART IS FROM PHONOPY, IT IS MORE EFFICIENT BUT I DOUBT IF IT'S CORRECT
    # For each vector, we will need to consider all nearby images in the
    # reduced bases. The lattice points at which supercell images are
    # searched are composed by linear combinations of three vectors in (0,
    # a, b, c, -a-b-c, -a, -b, -c, a+b+c). There are finally 65 lattice
    # points. There is no proof that this is enough.
    lattice_1D = (-1, 0, 1)
    lattice_4D = np.array(
        [
            [i, j, k, ll]
            for i in lattice_1D
            for j in lattice_1D
            for k in lattice_1D
            for ll in lattice_1D
        ]
    )
    bases = [[1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, -1, -1]]
    lattice_points = np.dot(lattice_4D, bases)
    lattice_points = np.array(
        np.unique(lattice_points, axis=0),
    )

    npoints = len(lattice_points)
    vecs = np.empty((npoints,3))
    #print(lattice_points)
    totiter = snatoms*natoms
    barcounter = 0
    printProgressBar(barcounter,totiter)
    for i in range(snatoms):
        for j in range(natoms):
            length = np.empty(npoints)
            for k in range(npoints):
                
                vecs[k] = spos[i]-pos[j]+lattice_points[k]
                
                length[k] = np.linalg.norm(vecs[k])
            
            minimum = None
            for k in range(npoints):
                if minimum is None:
                    minimum = length[k]
                elif length[k] < minimum:
                    minimum = length[k]
            
            count = 0
            for k in range(npoints):
                if np.abs(length[k] - minimum) < symprec:
                    transformedvec = CC.Methods.covariant_coordinates(np.linalg.inv(sbasis), vecs[k])#np.matmul(sbasis,vecs[k])
                    smallestvectors[i,j,count,:] = transformedvec
                    count += 1
            barcounter += 1
            printProgressBar(barcounter,totiter)
            if count > 27:
                print("Something's wrong in the crystal structure")
                return None, None
            else: 
                multi[i,j] = count
    
    
    
    return smallestvectors, multi


def s2p(spos, cell, p2s):
    '''
    Again, not originally my code, but modified for my purposes
    '''
    symprec = 1e-12
    frac_pos = spos

    p2s_positions = frac_pos[p2s]
    s2p_map = []
    for s_pos in frac_pos:
        # Compute distances from spos to all positions in pos.
        frac_diffs = p2s_positions - s_pos
        frac_diffs -= np.rint(frac_diffs)
        cart_diffs = np.dot(frac_diffs, cell)
        distances = np.sqrt((cart_diffs**2).sum(axis=1))
        indices = np.where(distances < symprec)[0]
        assert len(indices) == 1
        s2p_map.append(p2s[indices[0]])

    s2p_map = np.array(s2p_map, dtype="intc")
    

    return s2p_map


def write_phonon_hr(fcmat, svecs, mass, multi, super_pos, p2s_map, s2p_map, num_satom, num_patom,sbasis, outfile):
    '''
    Write phonon tight-binding Hamiltonian in the format of wannier90_hr.dat
    Copied and modified from Jarvis-Tools, mainly because of issues with the change of basis
    '''
    # maximum dimension for hr matrix
    ndim = 51
    sdim = 20
    nrpt_max = 51 ** 3
    # hr matrix
    norbs = num_patom * 3
    hr_mat = np.zeros((ndim, ndim, ndim, norbs, norbs), dtype="complex128")
    # hr_mat = np.zeros((ndim, ndim, ndim, norbs, norbs), dtype=np.complex128)
    hr_mat0 = np.zeros((nrpt_max, norbs, norbs), dtype="complex128")
    # hr_mat0 = np.zeros((nrpt_max, norbs, norbs), dtype=np.complex128)
    # WS points
    rpts = np.zeros((nrpt_max, 3), dtype="int32")
    # rpts = np.zeros((nrpt_max, 3), dtype=np.int32)
    # degeneracy
    dege = np.zeros((nrpt_max), dtype="int32")
    # dege = np.zeros((nrpt_max), dtype=np.int32)

    for iatom in range(num_patom):  # atoms in primitive cell
        for jatom in range(num_patom):  # atoms in primitive cell
            mass_sqrt = np.sqrt(mass[iatom] * mass[jatom])
            for katom in range(num_satom):  # atoms in supercell
                if s2p_map[katom] != p2s_map[jatom]:
                    continue
                for rr in range(np.int32(multi[katom, iatom])):
                    # find which rpt
                    rvec = (
                        svecs[katom, iatom, rr]
                        + super_pos[p2s_map[iatom]]
                        - super_pos[s2p_map[katom]]
                    )
                    rvec = CC.Methods.covariant_coordinates(sbasis, rvec)
                    for ii in range(3):
                        if abs(rvec[ii]) < 1.0e-5:
                            rvec[ii] = 0.0
                    rx = np.int32(np.round(rvec[0]))#np.int32(np.round(np.dot(rvec,sbasis[0])/np.linalg.norm(sbasis[0])))
                    ry = np.int32(np.round(rvec[1]))#np.int32(np.round(np.dot(rvec,sbasis[1])/np.linalg.norm(sbasis[1])))#np.int32(np.round(rvec[1]))
                    rz = np.int32(np.round(rvec[2]))#np.int32(np.round(np.dot(rvec,sbasis[2])/np.linalg.norm(sbasis[2])))#np.int32(np.round(rvec[2]))
                    idx = iatom * 3
                    idy = jatom * 3
                    rx = rx + sdim
                    ry = ry + sdim
                    rz = rz + sdim
                    hr_mat[rx, ry, rz, idx : idx + 3, idy : idy + 3] = fcmat[
                        p2s_map[iatom], katom
                    ] / (multi[katom, iatom] * mass_sqrt)
                    #print(multi[katom, iatom])

    # collect all hr at rpts with none-zero data
    irpt = 0  # count for useful rpts
    for rx in range(-sdim, sdim + 1):
        ixo = rx + sdim
        for ry in range(-sdim, sdim + 1):
            iyo = ry + sdim
            for rz in range(-sdim, sdim + 1):
                izo = rz + sdim
                #print(abs(hr_mat[ixo, iyo, izo, :, :]).sum())
                if (
                    abs(hr_mat[ixo, iyo, izo, :, :]).sum() < 1.0e-20
                ):  # ommit too small
                    continue
                dege[irpt] += 1
                rpts[irpt, 0] = rx
                rpts[irpt, 1] = ry
                rpts[irpt, 2] = rz
                hr_mat0[irpt, :, :] = hr_mat[ixo, iyo, izo, :, :]
                irpt = irpt + 1
    nrpt = irpt
    dege_rpts = dege[0:nrpt]
    norbs = num_patom * 3
    with open(outfile, "w") as f:
        line = (
            " Writen on "
            + str(datetime.now())
            + "\n"
            + "          "
            + str(norbs)
            + "\n"
            + "        "
            + str(nrpt)
            + "\n"
        )
        f.write(line)
        nl = np.int32(np.ceil(nrpt / 15.0))
        for n in range(nl):
            line = "    " + "    ".join(
                [str(np.int32(i)) for i in dege_rpts[n * 15 : (n + 1) * 15]]
            )
            f.write(line)
            f.write("\n")
        for irpt in range(nrpt):
            rx = rpts[irpt, 0]
            ry = rpts[irpt, 1]
            rz = rpts[irpt, 2]
            for jatomorb in range(norbs):
                for iatomorb in range(norbs):
                    rp = hr_mat0[irpt, iatomorb, jatomorb].real
                    ip = hr_mat0[irpt, iatomorb, jatomorb].imag
                    tmp = "{:8d}{:8d}{:8d}{:8d}{:8d}{:20.10f}{:20.10f}\n"
                    line = tmp.format(
                        rx, ry, rz, iatomorb + 1, jatomorb + 1, rp, ip
                    )
                    f.write(line)
    
    
if __name__ == '__main__':

    # Constant to get the correct units
    factor = 108.97077184367376 #PwscfToTHz

    # Handle inputs from terminal

    try:
        dynprefix = str(sys.argv[1])
    except IndexError:
        raise IndexError('Missing file name name.dyn. Usage: \'QE2TBDAT name.dyn N_irr_q [ASR], []=optional \'')

    try:
        nqirrs = int(sys.argv[2])
    except IndexError:
        raise IndexError('Missing number of irreducible q points N_irr_q. Usage: \'QE2TBDAT name.dyn N_irr_q [ASR], []=optional \'')

    try:
        asr = str(sys.argv[3])
        symmetrize = True
    except IndexError:
        symmetrize = False
        asr = False

    prefix = dynprefix.split('.dyn')[0]
    

    # Read files and define some constant variables
    dyn = CC.Phonons.Phonons()
    dyn.LoadFromQE(fildyn_prefix=dynprefix, nqirr=nqirrs)

    

    #dyn = dyn.InterpolateMesh(dyn.GetSupercell(), lo_to_splitting=True)
    #if symmetrize:
    #    dyn.Symmetrize(verbose=False, asr=asr, use_spglib=False)
    super_dyn = dyn.GenerateSupercellDyn(dyn.GetSupercell())
    
    #print(len(dyn.q_tot))
    #print(dyn.dielectric_tensor)
    #print(dyn.effective_charges)

    num_atom = int(len(dyn.structure.coords))
    num_satom = int(len(super_dyn.structure.coords))

    cell = dyn.structure.unit_cell
    scell = super_dyn.structure.unit_cell

    mass = super_dyn.structure.get_masses_array()*MASS_RY_TO_UMA

    positions = CC.Methods.covariant_coordinates(cell, dyn.structure.coords) 
    super_pos = CC.Methods.covariant_coordinates(cell, super_dyn.structure.coords) 

    # Mapping between the suppercell and the primitive cell
    p2s_map = np.arange(num_atom)
    s2p_map = s2p(super_pos,cell,p2s_map)

    print('Input files succesfully read!')


    # Calculate the smallest vectors and their multiplicity from the crystal structure
    print('Calculating smallest vectors...')
    svecs, multi = smallest_vectors(
        CC.Methods.covariant_coordinates(scell, super_dyn.structure.coords),
        CC.Methods.covariant_coordinates(scell, super_dyn.structure.coords),
        scell 
        )
    print("Done!")
    

    
    t2 = CC.ForceTensor.Tensor2(dyn.structure,
                 dyn.structure.generate_supercell(dyn.GetSupercell()),
                 dyn.GetSupercell())
    t2.verbose = False

    t2.SetupFromPhonons(dyn)
    
    t2.effective_charges=None
    #print(t2.x_r_vector2)
    #t2.Center()
    dyn2 = t2.GeneratePhonons(dyn.GetSupercell(), asr = asr, lo_to_splitting = False)
    #if symmetrize:
    dyn2.Symmetrize(verbose=False, asr=asr, use_spglib=False)

    

    fc = dyn2.GetRealSpaceFC(supercell_array=dyn2.GetSupercell())

    
    

    # Finally write the TB_hr.dat file
    print('Writing file...')
    write_phonon_hr(
            np.transpose(np.reshape(fc,(num_satom,3,num_satom,3)),axes=(0,2,1,3))*factor**2,
            svecs,
            mass,
            multi,
            super_dyn.structure.coords,
            p2s_map,
            s2p_map,
            num_satom,
            num_atom,
            cell,
            '{}_phononTB_hr.dat'.format(prefix)
        )

    print("Finished writing the Tight Binding file!")
    print('All done!')
